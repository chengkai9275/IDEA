<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间,作用是对SQL进行分类化管理,理解sql隔离
    注意：使用mapper代理方法开发，namespace有特殊重要的作用

    要在 SqlMapperConfig.xml中加载 mapper.xml文件
-->

<mapper namespace="ck.mybatis.mapper.UserMapper">

    <!--开启本mapper下的namespace的二级缓存
    type:指定cache接口的实现类的类型，默认使用prepetualCache
    要和ehcache整合，需要配置type 为 ehcache几口的类型
    -->
    <!--<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>-->

    <!--定义sql片段
    id：sql片段的唯一标示
    经验：sql片段基于单表来定义，这样的话 sql可重用性高
    在sql片段中不要包括where
    -->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                and user.username like '%${userCustom.username}%'
            </if>
        </if>
        <if test="ids != null">
            <!--使用froeach遍历传入ids
            collection:指定输入对象中集合属性
            item：每个遍历生成对象中
            open:开始遍历时拼接的串
            close：结束遍历时拼接的串
            separator: 遍历的两个串中间需要拼接的串

            <foreach collection="ids" item="user_id" open="and (" close=")" separator="or">
                id = #{user_id}
           </foreach>
            -->
            <foreach collection="ids" item="user_id" open="and id in(" close=")" separator=",">
                <!-- 每次遍历需要拼接的串-->
                #{user_id}
            </foreach>
        </if>
    </sql>


    <sql id="query_user_where2">
        <if test="userCustom != null">
            <if test="userCustom.address != null and userCustom.address != '' ">
                and user.address = #{userCustom.address}
            </if>
            <if test="userCustom.birthday != null">
                and user.birthday > #{userCustom.birthday}
            </if>
        </if>
    </sql>

    <resultMap id="userRe" type="ck.mybatis.po.UserCustom">
        <result column="性别" property="sex"/>
        <result column="姓名" property="username"/>
    </resultMap>

    <!--用户信息综合查询
    条件 地址是：北京
    姓名 性别
    -->
    <select id="findUserListES" parameterType="ck.mybatis.po.UserQueryVo"
            resultMap="userRe">
        SELECT username 姓名,sex 性别 from user
        <where>
            <include refid="query_user_where2"></include>
        </where>
    </select>

    <!--定义resultMap
    将SELECT id id_, username username_ FROM USER WHERE id=#{id}; 和User中的属性映射
    id:就是对resultMap的唯一标示
    type:resultMap最终所映射的java对象
    -->

    <resultMap id="userResultMap" type="user">
        <!--id 表示查询结果集中唯一标示
        column：查询出来的列名
        property：type所指定的pojo类型中的属性名
        最终 resultMap 将 column和property做一个映射关系
        -->
        <id column="id_" property="id"/>

        <!--对普通名映射定义
         column：查询出来的列名
        property：type所指定的pojo类型中的属性名
        最终 resultMap 将 column和property做一个映射关系
        -->
        <result column="username_" property="username"/>
    </resultMap>


    <!-- 用户信息综合查询
    #{userCustom.sex}:取出poko包装对象中性别值
    '%${userCustom.username}%':取出poko包装对象中用户名称
    -->
    <select id="findUserList" parameterType="ck.mybatis.po.UserQueryVo" resultType="ck.mybatis.po.UserCustom">
        SELECT * FROM User
        <!-- where可自动去除第一个and -->
        <where>
            <!--引用sql片段的id，如果refid指定的id不在本mapper中，需要加 namespace-->
            <!-- 在这里还有引用其他的sql片段 -->
            <include refid="query_user_where"></include>
        </where>
    </select>

    <!--用户信息综合查询总数-->
    <select id="findUserCount" parameterType="ck.mybatis.po.UserQueryVo" resultType="java.lang.Integer">
        SELECT count(*) FROM User
        <!-- where可自动去除第一个and -->
        <where>
            <!--引用sql片段的id，如果refid指定的id不在本mapper中，需要加 namespace-->
            <include refid="query_user_where"></include>
        </where>
    </select>


    <!-- 在映射文件中配置很对sql语句 -->
    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
    id : 标识映射文件中的sql
    将sql语句封装到mappedStrtement对象中，所以将id成为statement的id
    parameterType:指定输入参数的类型,这里指定int 和表对应
    #{}表示一个占位符
    #{id}：id表示接收收入的参数,参数是简单类型,参数名可以任意int
    resultType：指定sql输出结果所映射java对象类型,select指定resultType表示将单条记录映射成的java对象

    useCache: 是否使用缓存
    -->
    <select id="findUserById" parameterType="int" resultType="user" useCache="true">
        SELECT *
        FROM USER
        WHERE id = #{id};
    </select>

    <!--使用resultMap进行输出映射
    resultMap：指定定义的resultMap的id，如果这个mapper在其他的mapper文件中，需要加 namespace
    -->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT
            id       id_,
            username username_
        FROM USER
        WHERE id = #{id};
    </select>

    <!-- 根据用户名称模糊查询，可返回多条
     resultType:指定就是单条记录所映射的java对象类型
     ${}:拼接字符串,将接收到的参数的内容不加修饰拼接在sql中
     使用${}拼接sql,会引起sql注入
     ${name}:接收输入参数的内容，如果传入是简单类型，${}只能使用value
     -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="user">
        SELECT *
        FROM USER
        WHERE username LIKE '%${value}%';
    </select>

    <!-- 添加用户
    #{} 中指定pojo的属性名,接收pojo对象的属性值,mybatis中通过OGNL获取对象属性值
    -->
    <insert id="insertUser" parameterType="user">
        INSERT INTO USER (username, sex, birthday, address) VALUES (#{username}, #{sex}, #{birthday}, #{address});
    </insert>

    <!-- 删除用户 -->
    <delete id="deleteUser" parameterType="int">
        DELETE FROM USER
        WHERE id = #{id};
    </delete>

    <!--更新用户-->
    <update id="updateUser" parameterType="User">
        UPDATE user
        SET username = #{username}, birthday = #{birthday}, sex = #{sex}, address = #{address}
        WHERE id = #{id};
    </update>
</mapper>
