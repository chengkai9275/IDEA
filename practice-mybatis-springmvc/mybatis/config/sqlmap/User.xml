<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间,作用是对SQL进行分类化管理,理解sql隔离
    注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->

<mapper namespace="test">

    <!-- 在映射文件中配置很对sql语句 -->
    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
    id : 标识映射文件中的sql
    将sql语句封装到mappedStrtement对象中，所以将id成为statement的id
    parameterType:指定输入参数的类型,这里指定int 和表对应
    #{}表示一个占位符
    #{id}：id表示接收收入的参数,参数是简单类型,参数名可以任意int
    resultType：指定sql输出结果所映射java对象类型,select指定resultType表示将单条记录映射成的java对象
    -->
    <select id="findUserById" parameterType="int" resultType="ck.mybatis.po.User">
        SELECT * FROM USER WHERE id=#{id};
    </select>

    <!-- 根据用户名称模糊查询，可用返回多条
     resultType:指定就是单条记录所映射的java对象类型
     ${}:拼接字符串,将接收到的参数的内容不加修饰拼接在sql中
     使用${}拼接sql,会引起sql注入
     ${name}:接收输入参数的内容，如果传入是简单类型，${}只能使用value
     -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="ck.mybatis.po.User">
        SELECT * FROM USER WHERE username LIKE '%${value}%';
    </select>
    
    <!-- 添加用户
    #{} 中指定pojo的属性名,接收pojo对象的属性值,mybatis中通过OGNL获取对象属性值
    -->
    <insert id="insertUser" parameterType="ck.mybatis.po.User">

        <!--<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>-->
        INSERT INTO USER (username,sex,birthday,address)VALUES (#{username},#{sex},#{birthday},#{address});
        <!--
         将插入数据的主键返回，返回到user对象中
         SELECT LAST_INSERT_ID() 得到刚插入的主键值，只适用于自增主键
         keyProperty：将查询到的主键设置到 parameterType指定的对象中
         order 相对于insert来说它的执行顺序
         -->

    </insert>

    <!-- 删除用户 -->
    <delete id="deleteUser" parameterType="int">
        DELETE FROM USER WHERE id = #{id};
    </delete>
</mapper>
